---
- name: Deploy common exporters
  hosts: all
  roles:
    - prometheus.prometheus.node_exporter
  tags:
    - exporters

- name: Setup core monitoring software
  hosts: all
  roles:
    - role: prometheus.prometheus.prometheus
      vars:
        prometheus_targets:
          node:
          - targets:
            - localhost:9100
  tags:
    - prometheus

# As noted in [1] an exported dashboard replaces the exporter's datasource
    # name with a representative name, something like 'DS_GRAPHITE'. The name
    # is different for each datasource plugin, but always begins with 'DS_'.
    # In the rest of the data, the same name is used, but captured in braces,
    # for example: '${DS_GRAPHITE}'.
    #
    # [1] http://docs.grafana.org/reference/export_import/#import-sharing-with-grafana-2-x-or-3-0
    #
    # The data structure looks (massively abbreviated) something like:
    #
    #   "name": "DS_GRAPHITE",
    #   "datasource": "${DS_GRAPHITE}",
    #
    # If we import the downloaded dashboard verbatim, it will not automatically
    # be connected to the data source like we want it. The Grafana UI expects
    # us to do the final connection by hand, which we do not want to do.
    # So, in the below task we ensure that we replace instances of this string
    # with the data source name we want.
    # To make sure that we're not being too greedy with the regex replacement
    # of the data source to use for each dashboard that's uploaded, we make the
    # regex match very specific by using the following:
    #
    # 1. Literal boundaries for " on either side of the match.
    # 2. Non-capturing optional group matches for the ${} bits which may, or
    #    or may not, be there..
    # 3. A case-sensitive literal match for DS .
    # 4. A one-or-more case-sensitive match for the part that follows the
    #    underscore, with only A-Z, 0-9 and - or _ allowed.
    #
    # This regex can be tested and understood better by looking at the
    # matches and non-matches in https://regex101.com/r/f4Gkvg/6

- name: Deploy grafana
  hosts: all
  vars:
    grafana_dashboards_dir: /opt/grafana/dashboards
  pre_tasks:
    - name: Creates directory
      become: true
      ansible.builtin.file:
        path: '{{ grafana_dashboards_dir }}'
        state: directory
        owner: vagrant
        group: vagrant
    - name: Copy dashboard.json
      become: true
      ansible.builtin.copy:
        src: dashboard.json
        dest: '{{ grafana_dashboards_dir }}/dashboard.json'
        owner: vagrant
        group: vagrant
        mode: '0666'
    - name: Set the correct data source name in the dashboard
      ansible.builtin.replace:
        path: '{{ grafana_dashboards_dir }}/dashboard.json'
        regexp: '"(?:\${)?DS_[A-Z0-9_-]+(?:})?"'
        replace: '"prometheus"'
      changed_when: false
  roles:
    - role: grafana.grafana.grafana
      vars:
        grafana_security:
          admin_user: admin
          admin_password: admin
        # grafana_apt_{repo, key} vars are overriden to use without VPN
        # 'signed-by=/usr/share/keyrings/grafana.key' is replaced with 'trusted=yes' because I don't have mirror.yandex gpg key
        grafana_apt_repo: "deb [arch={{ grafana_apt_arch }} trusted=yes] https://mirror.yandex.ru/mirrors/packages.grafana.com/oss/deb/ {{ grafana_apt_release_channel }} main"
        # any garbage file to override default value https://apt.grafana.com/gpg.key
        grafana_apt_key: https://mirror.yandex.ru/mirrors/packages.grafana.com/oss/deb/dists/stable/Release.gpg
        grafana_url: localhost:3000
        grafana_metrics:
          enabled: true
        grafana_datasources:
          - name: prometheus
            type: prometheus
            access: proxy
            url: 'http://localhost:9090'
            basicAuth: false
            isDefault: true
  tags:
    - grafana
